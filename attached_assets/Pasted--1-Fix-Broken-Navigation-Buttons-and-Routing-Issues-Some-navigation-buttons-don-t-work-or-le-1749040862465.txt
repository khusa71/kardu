.

🧭 1. Fix Broken Navigation Buttons and Routing
Issues:

Some navigation buttons don't work or lead to non-existent pages.

Navigation bar appears broken on the History page.

Tasks:

Audit all routes defined in the frontend (e.g. react-router-dom or next/router) and backend endpoints.

Verify and fix missing or misrouted paths: Home, Upload, History, Study, Logout.

Ensure navigation bar appears consistently on all pages, including History.

Fix:

Use a single Layout or AppWrapper that includes the Navbar.

Ensure Navbar is not conditionally hidden on certain routes.

For mobile: test hamburger menu and responsiveness.

📁 2. Fix Upload Folder Button + Allow Reuse of Uploaded Files
Issues:

Upload Folder button doesn't allow browsing previously uploaded files.

Users can't reuse their existing uploaded PDFs.

Tasks:

Add a "My Files" modal to let users:

Browse previously uploaded files (list from object storage or DB).

Select a file to regenerate flashcards.

Fetch list of uploaded PDFs from backend for the current user.

Display file name, size, and upload date.

Add a "Use this File" button → pre-fills config and starts new job.

Backend:

Create GET /api/files to list user-uploaded files (from DB or storage).

Ensure only user’s own files are visible.

📚 3. Improve Study Card UI/UX and Formatting
Current Problem:

Flashcard UI is plain, centered text, with unformatted code snippets or AI responses.

Tasks:

Enhance card design:

Use styled card components (with Tailwind or existing UI framework).

Support markdown rendering for formatted content.

Syntax highlight code blocks (use react-syntax-highlighter or similar).

Add buttons:

Mark as Known / Unknown

Easy / Medium / Hard (for spaced repetition)

Add progress bar or status (e.g., “3 of 25 cards reviewed”)

🛡️ 4. Admin Page (Role-Based Access)
Goal: Only specific users can access /admin and view platform metrics.

Tasks:

Create AdminPage.tsx route and UI with placeholder content:

Total users

Jobs generated

Storage used

API calls (OpenAI/Anthropic split)

Add dummy analytics data (backend mock)

Restrict access using user email or role check:

Only allow access if user.email === 'admin@example.com' (placeholder)

Backend:

Add /api/admin/metrics (mock response for now)

Middleware to validate user is admin (based on hardcoded email or future isAdmin flag)

🧪 Bonus: Testing Checklist
After implementation, test:

 Navigation works from any page → any other page

 Navbar appears consistently

 File reuse works end-to-end

 Flashcard UI shows proper formatting and has study actions

 Admin page is inaccessible to non-admins

 All routes are protected with user auth

